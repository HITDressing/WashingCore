@model IEnumerable<BSXWashing.Models.DBClass.ItemModel>

@{
    ViewData["Title"] = "物品信息管理";
}

<div class="jumbotron" style="background-color:orange">
    <h2 style="color:white">@ViewData["Title"]</h2>
    <p style="color:white" class="lead">
        <a id="OJBK" class="btn btn-danger">导出表格</a>
    </p>
</div>

<table class="table table-condensed table-striped" id="downloadTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ItemName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ItemValue)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ItemNote)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ItemName">
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemValue)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemNote)
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    // 使用outerHTML属性获取整个table元素的HTML代码（包括<table>标签），然后包装成一个完整的HTML文档，设置charset为urf-8以防止中文乱码
    var html = "<html><head><meta charset='utf-8' /></head><body>" + document.getElementById("downloadTable").outerHTML + "</body></html>";
    // 实例化一个Blob对象，其构造函数的第一个参数是包含文件内容的数组，第二个参数是包含文件类型属性的对象
    var blob = new Blob([html], { type: "application/vnd.ms-excel" });
    var a = document.getElementById("OJBK");
    // 利用URL.createObjectURL()方法为a元素生成blob URL
    a.href = URL.createObjectURL(blob);
    // 设置文件名，目前只有Chrome和FireFox支持此属性
    a.download = "物品信息.xls";
</script>