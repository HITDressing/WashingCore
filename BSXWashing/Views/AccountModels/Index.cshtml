@model IEnumerable<BSXWashing.Models.DBClass.AccountModel>


@{
    ViewData["Title"] = "用户管理";
    ViewData["SubTitle"] = "对用户类别、级别、种类等信息进行管理";
}

<div class="jumbotron" style="background-color:lightsalmon">
    <h2 style="color:white">@ViewData["Title"]</h2>
    <h4>
        <span class="label label-default">@ViewData["SubTitle"]</span>
    </h4>
    <p style="color:white" class="lead">
        @Html.ActionLink("添加用户", "Create", "AccountModels", null, htmlAttributes: new { @class = "btn btn-info" })
        <a id="OJBK" class="btn btn-danger">导出表格</a>
    </p>

</div>

<table class="table" id="downloadTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.AccountName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Level)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Balance)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <a asp-action="Edit" class="btn btn-primary btn-xs" asp-route-id="@item.AccountName">@Html.DisplayFor(modelItem => item.AccountName)</a>
                </td>
                <td>
                    <a asp-action="Change" class="btn btn-info btn-xs" asp-route-id="@item.AccountName">@Html.DisplayFor(modelItem => item.Type)</a>
                </td>
                <td>
                    <a asp-action="Change" class="btn btn-info btn-xs" asp-route-id="@item.AccountName">@Html.DisplayFor(modelItem => item.Level)</a>
                </td>
                <td>
                    <a asp-action="Change" class="btn btn-info btn-xs" asp-route-id="@item.AccountName">@Html.DisplayFor(modelItem => item.Category)</a>
                </td>
                <td>
                    <a asp-action="Create" asp-controller="TopupModels" asp-route-id="@item.AccountName" class="btn btn-warning btn-xs">@Html.DisplayFor(modelItem => item.Balance)</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    // 使用outerHTML属性获取整个table元素的HTML代码（包括<table>标签），然后包装成一个完整的HTML文档，设置charset为urf-8以防止中文乱码
    var html = "<html><head><meta charset='utf-8' /></head><body>" + document.getElementById("downloadTable").outerHTML + "</body></html>";
    // 实例化一个Blob对象，其构造函数的第一个参数是包含文件内容的数组，第二个参数是包含文件类型属性的对象
    var blob = new Blob([html], { type: "application/vnd.ms-excel" });
    var a = document.getElementById("OJBK");
    // 利用URL.createObjectURL()方法为a元素生成blob URL
    a.href = URL.createObjectURL(blob);
    // 设置文件名，目前只有Chrome和FireFox支持此属性
    a.download = "用户信息.xls";
</script>